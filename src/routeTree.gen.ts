/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SandboxRouteImport } from './routes/sandbox'
import { Route as ElementsRouteImport } from './routes/elements'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkIndexRouteImport } from './routes/work.index'
import { Route as WorkProjectIdRouteImport } from './routes/work.$projectId'

const SandboxRoute = SandboxRouteImport.update({
  id: '/sandbox',
  path: '/sandbox',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementsRoute = ElementsRouteImport.update({
  id: '/elements',
  path: '/elements',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkIndexRoute = WorkIndexRouteImport.update({
  id: '/work/',
  path: '/work/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkProjectIdRoute = WorkProjectIdRouteImport.update({
  id: '/work/$projectId',
  path: '/work/$projectId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/elements': typeof ElementsRoute
  '/sandbox': typeof SandboxRoute
  '/work/$projectId': typeof WorkProjectIdRoute
  '/work': typeof WorkIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/elements': typeof ElementsRoute
  '/sandbox': typeof SandboxRoute
  '/work/$projectId': typeof WorkProjectIdRoute
  '/work': typeof WorkIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/elements': typeof ElementsRoute
  '/sandbox': typeof SandboxRoute
  '/work/$projectId': typeof WorkProjectIdRoute
  '/work/': typeof WorkIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/elements'
    | '/sandbox'
    | '/work/$projectId'
    | '/work'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/elements' | '/sandbox' | '/work/$projectId' | '/work'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/elements'
    | '/sandbox'
    | '/work/$projectId'
    | '/work/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ElementsRoute: typeof ElementsRoute
  SandboxRoute: typeof SandboxRoute
  WorkProjectIdRoute: typeof WorkProjectIdRoute
  WorkIndexRoute: typeof WorkIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sandbox': {
      id: '/sandbox'
      path: '/sandbox'
      fullPath: '/sandbox'
      preLoaderRoute: typeof SandboxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elements': {
      id: '/elements'
      path: '/elements'
      fullPath: '/elements'
      preLoaderRoute: typeof ElementsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work/': {
      id: '/work/'
      path: '/work'
      fullPath: '/work'
      preLoaderRoute: typeof WorkIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work/$projectId': {
      id: '/work/$projectId'
      path: '/work/$projectId'
      fullPath: '/work/$projectId'
      preLoaderRoute: typeof WorkProjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ElementsRoute: ElementsRoute,
  SandboxRoute: SandboxRoute,
  WorkProjectIdRoute: WorkProjectIdRoute,
  WorkIndexRoute: WorkIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
